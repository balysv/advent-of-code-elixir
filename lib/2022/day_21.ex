defmodule AdventOfCode.Y2022.Day21 do
  defp prepare_input(args) do
    args
    |> String.split(["\n", ": "], trim: true)
    |> Enum.chunk_every(2)
    |> Map.new(fn [name, op] -> {name, op} end)
  end

  defp solve(monkeys, name), do: monkeys |> Map.get(name) |> do_solve(monkeys)

  defp do_solve(
         <<l::bytes-size(4)>> <> " " <> <<sign::bytes-size(1)>> <> " " <> <<r::bytes-size(4)>>,
         monkeys
       ) do
    case sign do
      "-" -> solve(monkeys, l) - solve(monkeys, r)
      "+" -> solve(monkeys, l) + solve(monkeys, r)
      "*" -> solve(monkeys, l) * solve(monkeys, r)
      "/" -> solve(monkeys, l) / solve(monkeys, r)
    end
  end

  defp do_solve(number, _), do: String.to_integer(number)

  def part1(args) do
    args
    |> prepare_input()
    |> solve("root")
  end

  defp to_equation(monkeys, name) do
    case Map.get(monkeys, name) do
      <<l::bytes-size(4)>> <> " " <> <<sign::bytes-size(1)>> <> " " <> <<r::bytes-size(4)>> ->
        l = to_equation(monkeys, l)
        r = to_equation(monkeys, r)
        "(#{l}#{sign}#{r})"

      number ->
        number
    end
  end

  def part2(args) do
    monkeys =
      args
      |> prepare_input()
      |> Map.replace("humn", "x")

    <<l::bytes-size(4)>> <> <<_::bytes-size(3)>> <> <<r::bytes-size(4)>> =
      Map.get(monkeys, "root")

    # 1. compute one side of the '=' equation
    right = solve(monkeys, r)
    # 2. get the equation in printable form
    "#{to_equation(monkeys, l)}=#{right}"
    # 3. Magic step of copying equation to a calculator, solve for 'x'
    # (((((((4*2)*(((2*(((((((17+(2*(15+((9+(2+8))+(3*3)))))-((3*2)*4))+(20-3))*(5*(5*5)))/4)+((((2*11)+(2*3))+1)*(5*5)))+(((((5*(((3*((7*4)+15))+(10*3))+(((((((2*13)+1)+((3*11)-3))+(2*((3*16)+((3*3)+14))))-(14*2))*3)+1)))+((((((((5*7)+1)+8)*2)+1)*3)+((2*((2*(((7*3)+16)+4))/2))*2))-(4*(16+(((4*2)+3)-2)))))-(2*(((3*3)*((9+2)+((4*2)*2)))+((11*(5*3))+((((2*(5+18))*2)+(2*3))+15)))))/2)*2)))*2)+((((2*((2*((3*(6+5))+((20*2)/5)))-14))+(((2+(13*3))*4)/4))/3)*(3*(3*17)))))-((((2*((10+((2*(8+7))/5))+(3*5)))+(((3*(5+1))+(5*5))*2))+(2*((6*(2+4))+17)))*((7*3)*13)))+((((2*(2*((4+((5*5)+8))+6)))+(((2*5)+((5+1)+1))*(8-1)))+((((((9*3)+5)/4)-1)*(3+4))*2))*(2*((((12+1)*3)+(12*7))+8))))*(((((17*((((2*13)*2)+((2*13)+(7+4)))-(5*5)))*(((((((20+5)+4)*3)*5)-(((4*2)+((3*3)*7))*2))*2)+((((4*4)*((3+8)*2))+(3*((5*2)+(5+(4*2)))))+(((17*((2*3)+1))+((((3*16)+(2*((5*3)+(((2*5)*16)/8))))/2)+((14+3)*3)))+(13*(3+10))))))-(((3*(((5*2)*(2*(1+16)))+((5*11)+((((3+10)*2)+(5+((2*7)*3)))*2))))*(2*(14+((10+11)+((6*4)+8)))))+(((((2*(1+(3+3)))*8)+(15*(3+(4*2))))*3)*(2+(3*3)))))+((2*(((7*((((3*(4*2))*(5*5))-(1+(2*(((2*3)+(14+2))/2))))*((2*((10+7)*2))-(3*7))))+(((3*((((5*5)+11)+5)*2))+(((2*13)/2)*17))*2))-(5*((14*((3*((3*2)+1))+(((1+(2*5))*16)+((2*3)*(4+8)))))+((14+(2+(3*(((2*4)+11)-2))))*((2*3)+7))))))*(5*(1+6))))*2))-(((((((2*(((3*2)+1)*(6+(5*(2+5)))))+((((((((17*3)*5)+(2*(11*(12+1))))+(((8+5)*5)*3))+(((8*3)/2)*((((3*(((((4*13)*(((2*(((2+(3*(6+1)))+(((3*2)+1)*2))+1))/2)/2))+(((3*3)*(18+2))+((((2*(((3*((4*(2+5))+1))*6)-(11+(((3*3)*2)*8))))+((((((((((((3+4)*(7*7))+(2*((5*((((11+(14-1))+12)-5)*4))+(((((((((((((3*((((4*((12+(3*5))-((3*2)+2)))-(((((1+(7+4))*2)+(18+5))+3)/2))*2)+(((((20*2)+((7*5)*3))*2)/2)/5)))+((((((3*3)+2)+(4*3))*(1+((2*3)*3)))+((((((((((((((2*((3+(2*(1+18)))+20))+((((((x-(((2*7)*((12*(3+(2*5)))/3))+((((3+4)*3)*2)+4)))*4)+((2*(4*13))+((13+(11*2))*2)))/(1+(2*3)))-((((((((((14+3)*2)+1)*2)/2)*2)*(4+(((2+6)+5)*3)))/(1+(5+1)))+(8*(4*17)))/2))*(6*(3*2))))/5)+((3+((1+(9*2))*2))*11))+(3*((18*3)+((1+(11+5))*5))))/2)-(((((((4*(16*2))+(13+10))+((3*5)+(17*5)))*2)*2)/4)+((((((8+14)*4)+(((((5*(((9+(2*5))*7)/7))/5)*3)+4)*5))+(((2*5)*4)+(((3*3)*(2*3))+((8+3)*7))))-((2*((3*7)+(((2*((3*4)+(9+(2*(5+6)))))/2)*2)))/2))+(18*3))))*(2*4))-(20*(((2*19)/2)+(13+(3*5)))))/4)+(((10*10)-(14+((17*(((2*4)*3)/4))/(2+4))))*(6*2)))*2)-(((((4*2)+9)*2)*(2+5))-((3*3)+(4*7))))*4))+(((((2*((((2*3)+(2*4))*5)+1))+(7*(7+((2*4)*3))))*4)/2)-(12*19))))/2)-((((3*(2+(7+4)))+7)+((3*(3+((((4+19)+(17*2))/3)*2)))+(((((5*((((((3*(3+4))*2)+((3*3)*(3*3)))+((2+5)+3))/(14/2))-6))-19)-((12+8)-5))+(2*(10+1)))*2)))+(5*(20+9))))/2)+((((14+(((2*5)+((2*(1+((((4*11)/2)/2)*2)))-3))+(4*5)))+16)*3)+(7*((((5*7)/5)*4)/4))))*4)-(2*((15+(14*7))*2)))/4)+(((3*((9*3)+((3*2)+(5*2))))+10)*3))*4)-((4*((7+(3*2))+(8*(3*2))))*2))/4))))*2)-(((17*3)+(13*4))*2))/(3+(6+2)))+(6*(18+(9+2))))*9)-(7*3))/3)-(((((((2*((7*7)/(6+1)))/2)*2)+5)*2)+((3*11)*8))+(8*11)))/(3+4)))*(2*3))-((((((3*((5*((11*3)+6))/5))+((3*19)+(7*4)))+(4*6))+(5+(5*(11*2))))+((9*((((2*(((2*11)/2)+2))+3)-3)+(7*(6*4))))-(3*((11*2)+((7*3)+((2*11)+((8+1)*2)))))))/2))))/3)+(((((5*(3*2))+1)*5)*2)+(4*11))))-((((19*2)/2)+((3*3)*2))*3))/3)+((5*(5+(((((((3*12)+11)+((5+2)*2))*3)*4)/2)/3)))+(4+2)))))*2)-(((16*8)/4)*(2*8)))/8))*2)-(2*(5*7)))/4)+(12+((13*14)+((5*((2*20)+(4+9)))*3))))/3))*((2*(2+(3*3)))+1))=83397964201949
    # 4. Profit
    3_451_534_022_347
  end
end
